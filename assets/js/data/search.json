[ { "title": "Cluster with a Rubber Band", "url": "/posts/rubberband/", "categories": "homelab", "tags": "", "date": "2023-02-22 05:00:00 -0500", "snippet": "My cluster leads an exciting life‚Ä¶ Having ansible, reflashing the entire home lab has been a regular occurrence; its rather satisfying to be able to wipe the entire slate clean and start from scratch on a drop of a hat.The cluster is doing its ‚Äòjob‚Äô, its teaching me lots; ‚Äòah, thats why they did it this way or that way‚Äô..I‚Äôve scrounged old parts, soldered homemade powersupply out an old laptop power-brick and a bunch of LM2596 boards, to supply 5v to a raspberry, network switch and a sata enclosure; also turned the pi into a router.. Oh.. and the essential piece of hardware. The Blue Rubber Band. Rubber band is essential for electrons to flow!I then patched devplayer0/docker-net-dhcp plugin for swarm, installed ceph, wrote my own docker-volume-rbd pluggin‚Ä¶ might I be finally close to having a stable docker-swarm?? I even have some breadcrumbs from trying to install k3s on top of docker-swarm (the blasphemy!! But more about docker-swarm as a base for cluster in another post..)But‚Ä¶ not quite. Networking. What does get annoying is me breaking my home network every time I re-flash my homelab. I already had pi that I was using for pihole (DNS and DHCP) and not much else. Since getting another pi for experimentation is ridiculously impossible, I started repurposing my pihole pi to be also used by the cluster. Taking down the pi, ‚Äòbreaks the internet‚Äô!And while reading about flannel (for k8s) I discovered what keepalived really does‚Ä¶ Tinkered more with networking. Given me more ideas. Time to redesign the network now that I know slightly more how it works.The HardwareBack to basics.. philosopy. I had several considerations when building this out. Resilience: I don‚Äôt need (as far as I know now üòÑ ) any ‚Äòuptime‚Äô guarantee from my services. ‚ÄúService mostly up but if reboot is required, no problem‚Äù No need for multiple copies of a service (in general) for uptime guarantee (some exceptions) This project is for ‚Äúfun‚Äù. Don‚Äôt loose ‚Äòwork‚Äô Storage must be reliable Infrastructure-as-Code (mostly ansible), checked into github ‚ÄúCheap hardware‚Äù Used Dell machines (eBay) RaspberryPi (supposedly cheap, had an unused one) for boostraping PXE. OpenWRT on a cheap router (vs pfsense/netgate) Unmanaged 1GB switch 1GB Ethernet (Cat5e) Ideally, low-power components Relatively available ‚ÄúReplace failed hardware in a day or three and reflash with ansible‚Äù is acceptable in general OK to improve if price is reasonable Would had liked pfsense on Topton or Qotom (from aliespress), but its a single point of failure that takes weeks to replace Expensive relative to cluster price, but might be worth it Netgate available ‚Äònext day‚Äô but far too expensive for this effort Try to keep networking simple Will attempt setup without a loadbalancer All one subnet: REJECTED (need to isolate homelab experiments) The Software: Full Recovery Process in General (All hardware in ‚Äòfactory reset‚Äô state; i.e. unconnected and/or in cardboard boxes) Assemble and connect (i.e. replacement?) hardware (TODO) Automate OpenWRT config (ansible?) Yubikeys Init step CA certs into (step-yubikey-init) Init GPG for ssh-agent Bootstrap the bootstrap machine! a. Flash vanilla Raspbian onto an SD card b. Replace firstboot.sh on the SD card and boot up Raspberry Pi (SSH keys, systemd-networkd) c. Hit the RasperryPi with an ansible playbook (Docker-compose, Pihole, PXEServer, Docker Registry cache, APT cache) Hit the (powered-off) cluster with ansible playbook (WakeOnLan ‚ûú PXE+CloudInit ‚ûú Docker Swarm ‚ûú Ceph) Infrastructure-as-Code, Bootstrapping Bare Metal and Off-the-Shelf partsThis is not a new problem, PXE existed for decades at this point and its automation has been attempted many times it seems. I discovered such efforts a bit too-little-too-late: https://github.com/danderson/netboot and the like https://www.reddit.com/r/golang/comments/m49nls/netbootd_automate_os_provisioning_pxe_booting/I had briefly considered an off-the-shelf project that is well-funded by Canonical: MaaS. Before I knew much about PXE, TFTP and DHCP/BOOTP, it sounded rather overwhelming. But @TechnoTim has recently posted a video about it so I gave it an honest try. But after 3 days of trying, time to give up; It seems raspberry pi and MaaS don‚Äôt go together yet. I came across this blog that convinced me that while MaaS is nice and shiny, I can live without it.I might go back and experiment with PXE again, but for now, my own pxeserver will do the job just as well.This made me reflect. When to use of the shelf parts? Writing my own components for the lab is often interesting and definitely educational. Once done though.. the more parts I create, the bigger the tangle to maintain? Or is that a simpler tangle then a complex product?I am still on the fence about MaaS. And what about CEPH? Instead of rolling myself Ceph, what about Proxmox cluster which also has Ceph ‚Äòbuilt in‚Äô? Or cephadm..Seems like I have plenty of learning down the road to do." }, { "title": "Home Lab from First Principle", "url": "/posts/firstprinciples/", "categories": "homelab", "tags": "pxelinux", "date": "2022-09-23 06:00:00 -0400", "snippet": "Home Lab from First PrincipleI find the first principles in math quite fascinating‚Ä¶ its the answer to the most important question, ‚Äúchicken or the egg‚Äù??So I find myself with a bare, but typical ‚Äòhome network‚Äô, an ISP router and some personal devices on the network. Then I added a pihole for DHCP and DNS. I needed some compute and was inspired by TiniMiniMicro (its about the price of raspberry pies, at the scalping prices, which noone should pay..)So.. how does one bootstrap a cluster? I have not decided (or rather, ‚Äòlearnt‚Äô) how to properly arrange my homelab, would like to go back and adjust early decisions as I learn how wrong I am today. Or when add more ‚Äòthings‚Äô to the lab.. What is the ‚Äòfirst principle‚Äô for my cluster, how can I bootstrap a computer without any other computer?MAAS sounds ideal‚Ä¶ but.. its certainly not ‚Äòsmall‚Äô. I need to bootstrap my lab, and MAAS wants postgress, user management.. way too much for home use.Then I stumbled on How to configure a Raspberry Pi as a PXE boot serverThat is much closer to what I need! pihole already has installed dnsmasq, so its even ‚Äòless work‚Äô! (as-if üòÇ)So after some tinkering, yes, I can remote-boot a machine (what a backdoor‚Ä¶ lets ignore that‚Ä¶ need to get pfsense probably). YES!! Still. Problem. ubuntu install is not completely ‚Äòheadless‚Äô. This is however an old problem. The solution.. keeps changing. Here is the best post I found on the subject.Now I have all the pieces, how to glue that all together. Just need a pxelinux.cfg and user-data per machine some static content (ubuntu iso, vmlinuz, initrd, system.efi‚Ä¶) tftp and http fileserver to serve the above content dnsmasq to direct boot sequence to above http/tftp serverdnsmasq has a tftp server, http fileserver is a python one-liner, but.. copy-paste duplication of files is ‚Äòblasphemy‚Äô!!‚ÄòLuckily‚Äô, I spent several years working with go text/template (i.e. {{.Varname}} syntax, it shows in a lot of tools). Go also has a file server.. and.. yes, there is an implementation of tftp! https://github.com/pin/tftp. So.. we can implement a bootstrap server in go!!!Few hours later:serve: host: &lt;raspberry pihole hostname&gt; http: 8080 tftp: 69 datadir: /staticinventory: 12:34:56:78:9A:B3: firefly1 12:34:56:78:9A:BB: firefly2 12:34:56:78:9A:BE: firefly3 12:34:56:78:9A:B5: firefly4 12:34:56:78:9A:B7: firefly5passwordhash: # `apt-get install whois &amp;&amp; mkpasswd &lt;password&gt;`bootmenu: | DEFAULT install LABEL install KERNEL http://{{.Server}}:{{.HttpPort}}/static/efi64/vmlinuz INITRD http://{{.Server}}:{{.HttpPort}}/static/efi64/initrd APPEND root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://{{.Server}}:{{.HttpPort}}/static/ubuntu-22.04.1-live-server-amd64.iso autoinstall ds=nocloud-net;s=http://{{.Server}}:{{.HttpPort}}/autoinstall/{{.Hostname}}/ cloud-config-url=/dev/nullcloudinit: | #cloud-config autoinstall: updates: security version: 1 reporting: hook: type: webhook endpoint: http://{{.Server}}:{{.HttpPort}}/cloudlog/{{.Hostname}} apt: disable_components: [] geoip: true preserve_sources_list: false primary: - arches: - amd64 - i386 uri: http://{{.Server}}:3142/ubuntu - arches: - default uri: http://{{.Server}}:3142/ubuntu drivers: install: false identity: hostname: {{.Hostname}} password: {{.PasswordHash}} realname: vpaprots username: vpaprots kernel: package: linux-generic...Added an apt-cacher-ng on the pi (probably not a good solution long-term..) and call-home log reporting to the golang server. Then realized that I need to send WakeOnLine packets, added that too.. Since have a webserver, hooked WOL up to a GET request.. And for good measure, I thought it might be nice to see what part of the install we are on, which can be gleaned from what files have been requested so far! (First time using websockets.. and accidentally stumbled on bootstrap.js.. so many pieces!!)And.. voila.. (and I need to find how to make better gifs üòÖ)Full code at @vpaprots/pxeserver." }, { "title": "Hello Home Lab", "url": "/posts/hellohomelab/", "categories": "homelab", "tags": "", "date": "2022-09-22 21:16:16 -0400", "snippet": "Testing, Testing.. But Why!I‚Äôve managed to stay away from ‚Äòafter-work‚Äô programming since my laptop drive died more then a decade ago.. with all my photos, hobbies, tinker ideas‚Ä¶ I think the silver lining was that I spent far more time hiking instead!I bought a Prusa MK3S+ some 10 months ago, which, as one pedantic observer might note, is still not a ‚Äòafter-work‚Äô programming hobby. How little did I know‚Ä¶3D Printing is a gateway drug. First you get a printer‚Ä¶ then you realize, SD cards? thats so last decade.. oh, Octoprint.. interesting. Ah, and Raspberry pies are so low effort, I should use them more! Hmm, but.. ‚Äúwow, these prints take all day!? and wow, its so easy to mess up and end up with a blob of death‚Äù.. Oh, just need a camera and Spaghetti detector.. hmm but image recognition is too much for a poor pi, need to offload..‚ÄùThen stumble on pihole.. and homeassistant.. and esp32.. and esphome.. and nrf51.. and finally..Gateway drug indeed." } ]
